generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id          String       @id
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  mental_health_score Int?
  is_boarding Boolean?
  department  department_enum
  sex         UserSex
  createdAt   DateTime     @default(now())
  parentId    String
  parent      Parent       @relation(fields: [parentId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     Int
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
  birthday    DateTime
  takes_external_tutorship Boolean
  disability      String?
  number_of_siblings Int?
  internet_access_at_home Boolean
  clubs       Student_Club[]   // Added opposite relation for Student_Club
  disciplinary_records disciplinary_record[]  // Added opposite relation for DisciplinaryRecord
}

model Teacher {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime  @default(now())
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]
  birthday  DateTime
  teacher_highest_education_level educationlevel
  date_of_employment DateTime
  years_of_experience_before_joining Int?
}

model Parent {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
  income_level incomelevel
  parent_highest_education_level educationlevel
  parent_support_index Float? @db.DoublePrecision()  // Replaced @db.Float() with @db.DoublePrecision()
}

model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique

  students Student[]
  classes Class[]
}

model Class {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int

  supervisorId  String?
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  lessons       Lesson[]
  students      Student[]
  gradeId       Int
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId   Int
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Result {
  id    Int @id @default(autoincrement())
  score Int

  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId String
  student   Student @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model Club {
  id        String   @id 
  name      String   @unique
  description String?
  category  ClubCategory
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  students  Student_Club[]
}

enum ClubCategory {
  Sports
  Arts
  Academic
  Cultural
  Other
}

model Student_Club {
  student   Student @relation(fields: [studentId], references: [id])
  studentId String
  club      Club @relation(fields: [clubId], references: [id])
  clubId    String
  joinDate  DateTime
  role      StudentClubRole
  @@id([studentId, clubId])
}

model disciplinary_record {
  id          Int   @id @default(autoincrement())  // Changed id to Int with autoincrement
  student     Student  @relation(fields: [studentId], references: [id])
  studentId   String
  incidentDate DateTime     @default(now())
  incidentDescription String?
  infraction  Infraction
  consequence Consequence
  consequenceDetails String?
  reportedBy  String?
  reportedDate DateTime     @default(now())
  updatedAt   DateTime  @default(now())
}

enum Infraction {
  Bullying
  Fighting
  Disruption
  Cheating
  Other
}

enum Consequence {
  Detention
  Suspension
  Expulsion
  Counseling
  Other
}

enum StudentClubRole {
  Member
  President
  VicePresident
  Secretary
  Other
}

enum UserSex {
  MALE
  FEMALE
}

enum department_enum {
  science
  arts
  commerce
  none
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum incomelevel {
  Below50k
  Between50kTo100k
  Between100kTo200k
  Between200kTo500k
  Between500kTo1m
  Between1mTo2m
  Between2mTo5m
  Above5m
}

enum educationlevel {
  Primary
  Secondary
  Vocational
  Diploma
  Bachelor
  Master
  Doctoral
  Other
}

